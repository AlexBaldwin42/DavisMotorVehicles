@using DavisMotorVehicles.Shared.ViewModels;
@using BlazorStrap;
@inject HttpClient Http
@inject IJSRuntime JS


<!-- Button trigger modal -->
@*<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#yolo">*@
@*<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#@("VehicleModal" + Vehicle.VehicleId)">
	@ButtonText
</button>
*@@*<BSButton Color="BSColor.Primary">Primary</BSButton>*@
@*<BSButton Color="BlazorStrap.BSColor.Primary" Target="@("VehicleModal" + Vehicle!.VehicleId)">@ButtonText</BSButton>*@
<BSButton @ref="OpenButton" Color="BlazorStrap.BSColor.Primary" Target="@ModalId">@ButtonText</BSButton>

@*<BSModal @ref="Modal" IsCentered="true" DataId="@("VehicleModal" + Vehicle.VehicleId)">*@
<BSModal @ref="Modal" IsCentered="true" DataId="@ModalId">
	<Header>@HeaderText</Header>
	<Content>
		@*<BSInput InputType="InputType.Text" is @bind-Value=Vehicle.Model></BSInput>*@

		<div class="form-floating">
			<input type="make" class="form-control" id="floatingInput" placeholder="Ford, Honda ..." @bind-value=Vehicle.Make>
			<label for="floatingInput">Make</label>
		</div>
		<div class="form-floating ">
			<input class="form-control" @bind-value=Vehicle.Model>
			<label for="floatingPassword">Model</label>
		</div>
		<div class="form-floating">
			<input class="form-control" @bind-value=Vehicle.Year>
			<label for="floatingPassword">Year</label>
		</div>
		<div class="form-floating">
			<input class="form-control" @bind-value=Vehicle.Vin>
			<label for="floatingPassword">Vin</label>
		</div>

		<div class="form-floating">
			@*<BSInput InputType="InputType.Select" @bind-Value="Vehicle.VehicleTypeId" Value="@Vehicle.VehicleTypeId" @onchange="TypeChange">*@
			<BSInput InputType="InputType.Select" @bind-Value="Vehicle.VehicleTypeId" @onchange="TypeChange">
				<option value="1">Car</option>
				<option value="2">Truck</option>
				<option value="3">Motorcycle</option>
				<option value="4">Boat</option>
			</BSInput>
			<label for="floatingSelect">Vehicle Type</label>
		</div>

		<label for="fuelRange" class="form-label">Fuel Level @(Vehicle.FuelLevel) %</label>
		<input type="range" class="form-range" min="0" max="100" step="1" id="fuelRange" @bind-value=Vehicle.FuelLevel>

		@if (Vehicle.Tires != null && Vehicle.Tires.Count > 0)
		{
			for (int i = 0; i < Vehicle.Tires.Count(); i++)
			{
				// Local variable to keep binding reference valid
				int tireIndex = i;

				<div class="form-floating">
					<BSInput InputType="InputType.Select" @bind-Value="Vehicle.Tires[tireIndex].TireStatusId">
						<option value="1">Bad</option>
						<option value="2">Ok</option>
						<option value="3">Good</option>
					</BSInput>
					<label for="floatingSelect">Tire status</label>
					@*<BSButton @onclick="@(()=> DeleteTire(Vehicle.Tires[tireIndex]))" Color="BSColor.Warning">Delete</BSButton>*@
				</div>
			}
		}

		@*<BSButton OnClick="AddTire" Color="BlazorStrap.BSColor.Primary">Add Tire</BSButton>*@

	</Content>
	<Footer Context="modal">
		<BSButton MarginStart="Margins.Auto" Color="BSColor.Secondary" @onclick="modal.HideAsync">Cancel</BSButton>
		<BSButton Color="BSColor.Primary" @onclick="Save">Save</BSButton>
	</Footer>
</BSModal>
<div class="modal fade" id="@("VehicleModal" + Vehicle.VehicleId)" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="staticBackdropLabel">@HeaderText</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>

			<div class="modal-body vehicle-edit">


				<div class="container">
					<div class="row">
						<div class="col-12">
						</div>
						<div class="col-12"></div>
					</div>
				</div>


			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-primary" @onclick="Save">Save</button>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public VehicleViewModel? Vehicle { get; set; }
	[Parameter]
	public EventCallback<VehicleViewModel> VehicleChanged { get; set; }
	[Parameter]
	public EventCallback<VehicleViewModel> OnVehicleAdded { get; set; }

	private BSModal? Modal { get; set; }
	private BSButton? OpenButton { get; set; }
	private string HeaderText { get; set; }
	private string ButtonText { get; set; }
	private string ModalId { get { return "VehicleModal" + Vehicle.VehicleId; } }
	private VehicleTypeViewModel[]? VehicleTypes { get; set; }

	//private bool IsNewVehicle { get { return Vehicle.VehicleId == default(int); } }
	private bool IsNewVehicle { get; set; }


	public VehicleEdit()
	{
		HeaderText = "Add New Vehicle";
		ButtonText = "Add New Vehicle";
	}
	protected override async void OnInitialized()
	{
		base.OnInitialized();
		if (Vehicle == null)
		{
			Vehicle = new();
			Vehicle.VehicleId = default(int);
			IsNewVehicle = true;

		}
		else
		{
			HeaderText = "Edit vehicle";
			ButtonText = "Edit";
		}
		VehicleTypes = await Http.GetFromJsonAsync<VehicleTypeViewModel[]>("VehicleTypes/");
		Console.WriteLine("Vehicle Edit Initialized");
	}
	public void RemoveTires(int quantityToRemove)
	{
		Console.WriteLine($"Removing {quantityToRemove}");
		if (Vehicle!.Tires == null)
		{
			return;
		}

		for (int i = 0; i < quantityToRemove; i++)
		{
			Vehicle.Tires.Remove(Vehicle.Tires.Last());
		}
	}
	public void AddTires(int quantityToAdd)
	{
		Console.WriteLine($"Adding {quantityToAdd}");
		if (Vehicle.Tires == null)
		{
			Vehicle.Tires = new();
		}
		for (int i = 0; i < quantityToAdd; i++)
		{
			Vehicle.Tires.Add(new TireVm() { TireStatus = "Good", TireStatusId = 3 });
		}
	}
	//public async void DeleteTire(TireVm tire)
	//{
	//	Vehicle.Tires.Remove(tire);
	//	var response = await Http.DeleteAsync($"tire/{tire.TireId}");
	//}
	public async Task Save()
	{

		Console.WriteLine($"Saving  typename {Vehicle.VehicleTypeName} typeId  {Vehicle.VehicleTypeId}");
		var response = await Http.PostAsJsonAsync<VehicleViewModel>("vehicle", Vehicle);
		if (response.IsSuccessStatusCode)
		{
			Vehicle = await response.Content.ReadFromJsonAsync<VehicleViewModel>();
			if (IsNewVehicle)
			{
				await OnVehicleAdded.InvokeAsync(Vehicle);
				Vehicle = new VehicleViewModel();
				IsNewVehicle = false;
			}
			else
			{
				await VehicleChanged.InvokeAsync(Vehicle);
			}

			await Modal!.HideAsync();
		}

	}
	public async void TypeChange(ChangeEventArgs e)
	{
		Console.WriteLine($"typechange {Vehicle.VehicleTypeId}");
		//if (Vehicle!.VehicleTypeId != default(int) && VehicleTypes != null)
		if (VehicleTypes != null)
		{

			var vehicleType = VehicleTypes!.Where(i => i.VehicleTypeId == int.Parse(e.Value.ToString())).SingleOrDefault();

			int currentQuantityOfTires = Vehicle.Tires == null ? 0 : Vehicle.Tires.Count();
			int newQuantityOfTires = vehicleType.NumberOfTires;

			Vehicle.VehicleTypeId = vehicleType.VehicleTypeId;
			Vehicle.VehicleTypeName = vehicleType.VehicleTypeName;


			if (currentQuantityOfTires < newQuantityOfTires)
			{
				AddTires(Math.Abs(newQuantityOfTires - currentQuantityOfTires));
			}
			else
			{
				RemoveTires(currentQuantityOfTires - newQuantityOfTires);
			}

		}

		if (!IsNewVehicle)
		{
			await VehicleChanged.InvokeAsync(Vehicle);
		}

	}
}
