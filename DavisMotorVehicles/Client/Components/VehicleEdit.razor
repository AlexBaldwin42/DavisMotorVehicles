@page "/vehicle"
@using Microsoft.Fast.Components.FluentUI
@using DavisMotorVehicles.Data.DataTransferObjects;
@inject HttpClient Http
<PageTitle>Vehicles</PageTitle>
@*
<FluentCard>
	<h2>Hello World!</h2>
	<FluentButton Appearance="@Appearance.Accent">Click Me</FluentButton>
</FluentCard>
*@
<h3>VehicleEdit</h3>

@if (vehicles == null)
{
	<p>Loading</p>
}
else
{
	<table class="table">
		<thead>

			<tr>
				<th>Make</th>
				<th>Model</th>
				<th>Year</th>
				<th>Vin</th>
				<th>Fuel Level</th>
				<th>Type</th>
				<th>Fuel</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var vehicle in vehicles)
			{
				<tr style="margin-bottom:100px">
					<td>@vehicle.Make</td>
					<td>@vehicle.Model</td>
					<td>@vehicle.Year</td>
					<td>@vehicle.VinNumber</td>
					<td>@vehicle.FuelLevel</td>
					<td>@vehicle.VehicleTypeName</td>
					<td>

						<div style="width:300px; margin-bottom:20px" class="">


							@*<FluentSlider Orientation="Orientation.Horizontal" Min="0" Max="100" Step="10"  @onchange="()=> DragEnd(vehicle)"  @bind-Value="@vehicle.FuelLevel"> *@
							@*pass the value from the on change event to the function DragEnd*@

							<FluentSlider Orientation="Orientation.Horizontal" Min="0" Max="100" Step="10" @onchange="(i)=> DragEnd(i, vehicle)" @bind-Value="vehicle.FuelLevel">
								@*<FluentSlider Orientation="Orientation.Horizontal" Min="0" Max="100" Step="10" @bind="veh" Value="vehicle.FuelLevel" @onchange="()=> DragEnd(vehicle)" ValueChanged="@DragEnd(vehicle)">*@
								<FluentSliderLabel Position="0">0&#8451;</FluentSliderLabel>
								<FluentSliderLabel Position="10">10&#8451;</FluentSliderLabel>
								<FluentSliderLabel Position="90">90&#8451;</FluentSliderLabel>
								<FluentSliderLabel Position="100">100&#8451;</FluentSliderLabel>
							</FluentSlider>
							@*<FluentButton @onclick="()=> Submit(vehicle)">Submit</FluentButton>*@
						</div>
					</td>
				</tr>

			}
		</tbody>
	</table>
}

<FluentButton @onclick="() => AddVehicle()">AddVehicle</FluentButton>
<div class="container">
	<div class="row">
		<div class="col6">
		</div>
		<div class="col6">
		</div>
	</div>
</div>

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
	Launch static backdrop modal
</button>

<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="staticBackdropLabel">Modal title</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				...
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<button type="button" class="btn btn-primary">Understood</button>
			</div>
		</div>
	</div>
</div>



@code {
	private VehicleDto[]? vehicles;

	protected override async Task OnInitializedAsync()
	{

		vehicles = await Http.GetFromJsonAsync<VehicleDto[]>("Vehicle");
	}
	protected async Task DragEnd(Microsoft.AspNetCore.Components.ChangeEventArgs i, VehicleDto vehicle)
	{
		Console.WriteLine(i.Value);
		vehicle.FuelLevel = int.Parse(i.Value.ToString());
		Console.WriteLine(vehicle.FuelLevel);
		Console.WriteLine("youoloo");
		//vehicle = vehicles.Where(i => i.Id == vehicle.Id).Single();
		//vehicle.FuelLevel = int.Parse(parameter.Value.ToString());
		await Http.PostAsJsonAsync("Vehicle", vehicle);
	}

	public void AddVehicle()
	{


	}
	//protected void Submit(Vehicle vehicle)
	//{
	//	//var vehicle = vehicles.Where(i => i.Id == vehicleId).Single();
	//	//vehicle.FuelLevel = int.Parse(parameter.Value.ToString());
	//	foreach (var vehicle1 in vehicles)
	//	{
	//		vehicle.FuelLevel = 10;
	//	}
	//	//await Http.PostAsJsonAsync("Vehicle", vehicle);
		//}

}
