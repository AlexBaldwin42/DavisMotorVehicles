@using DavisMotorVehicles.Shared.ViewModels;
@using BlazorStrap;
@inject HttpClient Http

<!-- Button trigger modal -->
<BSButton Color="BlazorStrap.BSColor.Primary" Target="@ModalId">@ButtonText</BSButton>

<BSModal @ref="Modal" IsCentered="true" DataId="@ModalId">
	<Header>@HeaderText</Header>
	<Content>

		<div class="form-floating">
			<input class="form-control" @bind-value=Vehicle.Make>
			<label>Make</label>
		</div>

		<div class="form-floating ">
			<input class="form-control" @bind-value=Vehicle.Model>
			<label>Model</label>
		</div>

		<div class="form-floating">
			<input class="form-control" @bind-value=Vehicle.Year>
			<label>Year</label>
		</div>

		<div class="form-floating">
			<input class="form-control" @bind-value=Vehicle.Vin>
			<label>Vin</label>
		</div>

		<div class="form-floating">
			<BSInput InputType="InputType.Select" @bind-Value="Vehicle.VehicleTypeId" @onchange="TypeChange">
				<option value="1">Car</option>
				<option value="2">Truck</option>
				<option value="3">Motorcycle</option>
				<option value="4">Boat</option>
			</BSInput>
			<label>Vehicle Type</label>
		</div>

		<label for="fuelRange" class="form-label">Fuel Level @(Vehicle.FuelLevel) %</label>
		<input type="range" class="form-range" min="0" max="100" step="1" id="fuelRange" @bind-value=Vehicle.FuelLevel>

		@if (Vehicle.Tires != null && Vehicle.Tires.Count > 0)
		{
			for (int i = 0; i < Vehicle.Tires.Count(); i++)
			{
				// Local variable to keep binding reference valid
				int tireIndex = i;

				<div class="form-floating">
					<BSInput InputType="InputType.Select" @bind-Value="Vehicle.Tires[tireIndex].TireStatusId">
						<option value="1">Bad</option>
						<option value="2">Ok</option>
						<option value="3">Good</option>
					</BSInput>
					<label>Tire status</label>
				</div>
			}
		}
	</Content>

	<Footer Context="modal">
		<BSButton MarginStart="Margins.Auto" Color="BSColor.Secondary" @onclick="modal.HideAsync">Cancel</BSButton>
		<BSButton Color="BSColor.Primary" @onclick="Save">Save</BSButton>
	</Footer>
</BSModal>

@code {
	[Parameter]
	public VehicleViewModel? Vehicle { get; set; }
	[Parameter]
	public EventCallback<VehicleViewModel> VehicleChanged { get; set; }
	[Parameter]
	public EventCallback<VehicleViewModel> OnVehicleAdded { get; set; }

	private BSModal? Modal { get; set; }
	private string HeaderText { get; set; }
	private string ButtonText { get; set; }
	private string ModalId { get { return "VehicleModal" + Vehicle.VehicleId; } }
	private VehicleTypeViewModel[]? VehicleTypes { get; set; }
	private bool IsNewVehicle { get; set; }

	public VehicleEdit()
	{
		HeaderText = "Add New Vehicle";
		ButtonText = "Add New Vehicle";
	}

	protected override async void OnInitialized()
	{
		base.OnInitialized();
		if (Vehicle == null)
		{
			Vehicle = new();
			Vehicle.VehicleId = default(int);
			IsNewVehicle = true;

		}
		else
		{
			HeaderText = "Edit vehicle";
			ButtonText = "Edit";
		}
		VehicleTypes = await Http.GetFromJsonAsync<VehicleTypeViewModel[]>("VehicleTypes/");
	}

	public void RemoveTires(int quantityToRemove)
	{
		if (Vehicle!.Tires == null)
		{
			return;
		}

		for (int i = 0; i < quantityToRemove; i++)
		{
			Vehicle.Tires.Remove(Vehicle.Tires.Last());
		}
	}

	public void AddTires(int quantityToAdd)
	{
		if (Vehicle!.Tires == null)
		{
			Vehicle.Tires = new();
		}
		for (int i = 0; i < quantityToAdd; i++)
		{
			Vehicle.Tires.Add(new TireVm() { TireStatus = "Good", TireStatusId = 3 });
		}
	}

	public async Task Save()
	{
		var response = await Http.PostAsJsonAsync<VehicleViewModel>("vehicle", Vehicle);
		if (response.IsSuccessStatusCode)
		{
			Vehicle = await response.Content.ReadFromJsonAsync<VehicleViewModel>();
			if (IsNewVehicle)
			{
				await OnVehicleAdded.InvokeAsync(Vehicle);
				Vehicle = new VehicleViewModel();
				IsNewVehicle = false;
			}
			else
			{
				await VehicleChanged.InvokeAsync(Vehicle);
			}

			await Modal!.HideAsync();
		}

	}

	public void TypeChange(ChangeEventArgs e)
	{
		if (VehicleTypes != null)
		{

			var vehicleType = VehicleTypes!.Where(i => i.VehicleTypeId == int.Parse(e.Value.ToString())).SingleOrDefault();

			int currentQuantityOfTires = Vehicle.Tires == null ? 0 : Vehicle.Tires.Count();
			int newQuantityOfTires = vehicleType.NumberOfTires;

			Vehicle.VehicleTypeId = vehicleType.VehicleTypeId;
			Vehicle.VehicleTypeName = vehicleType.VehicleTypeName;


			if (currentQuantityOfTires < newQuantityOfTires)
			{
				AddTires(Math.Abs(newQuantityOfTires - currentQuantityOfTires));
			}
			else
			{
				RemoveTires(currentQuantityOfTires - newQuantityOfTires);
			}

		}
	}
}
