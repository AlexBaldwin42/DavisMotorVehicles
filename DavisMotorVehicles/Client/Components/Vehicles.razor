@page "/vehicles"
@using Microsoft.Fast.Components.FluentUI
@using DavisMotorVehicles.Shared.ViewModels;
@using System.Linq;
@inject HttpClient Http
<PageTitle>Vehicles</PageTitle>
<h3>Vehicles</h3>

@if (vehicles == null)
{
	<div class="spinner-border text-primary" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>

	<p>Loading</p>
}
else
{
	<table class="table">
		<thead>

			<tr>
				<th>Make</th>
				<th>Model</th>
				<th>Year</th>
				<th>Vin</th>
				@*<th>Fuel Level</th>*@
				<th>Type</th>
				<th>Fuel</th>
				<th>Tires</th>
				<th>Edit</th>
			</tr>
		</thead>
		<tbody>
			@for (int i = 0; i < vehicles.Count(); i++)
			{
				int localVehicleIndex = i;
				<tr style="margin-bottom:100px">
					<td>@vehicles[localVehicleIndex].Make</td>
					<td>@vehicles[localVehicleIndex].Model</td>
					<td>@vehicles[localVehicleIndex].Year</td>
					<td>@vehicles[localVehicleIndex].Vin</td>
					@*					<td>@vehicles[localVehicleIndex].FuelLevel</td>*@
					<td>@vehicles[localVehicleIndex].VehicleTypeName</td>
					<td>
						<div style="width:300px; margin-bottom:20px" class="">
							<div class="progress">
								<div class="progress-bar" role="progressbar" aria-label="Example with label" style="width: @vehicles[localVehicleIndex].FuelLevel%;" aria-valuenow="@vehicles[localVehicleIndex].FuelLevel" aria-valuemin="0" aria-valuemax="100">@vehicles[localVehicleIndex].FuelLevel%</div>
							</div>
							@*	<FluentSlider Orientation="Orientation.Horizontal" Min="0" Max="100" Step="10" @bind-Value="vehicles[i].FuelLevel">
					<FluentSliderLabel Position="0">Empty</FluentSliderLabel>
					<FluentSliderLabel Position="50">50%</FluentSliderLabel>
					<FluentSliderLabel Position="100">Full</FluentSliderLabel>
					</FluentSlider>*@
						</div>
					</td>

					<td>
						@for (int j = 0; j < vehicles[localVehicleIndex]!.Tires.Count; j++)
						{
							var tireIndex = j;
							<BSImage Source="@(vehicles[localVehicleIndex].Tires[j].TireStatus + ".svg")" style="height:40px; width:30px"> </BSImage>

						}

					</td>
					<td><VehicleEdit @bind-Vehicle="vehicles[localVehicleIndex]"></VehicleEdit></td>
				</tr>

			}
		</tbody>
	</table>
}


<VehicleEdit @ref="NewVehicleEdit" OnVehicleAdded="@AddNewVehicle"></VehicleEdit>

@code {
	private VehicleViewModel[]? vehicles;
	private VehicleEdit? NewVehicleEdit;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		Console.WriteLine("Initialized");
		vehicles = await Http.GetFromJsonAsync<VehicleViewModel[]>("Vehicle");
	}
	private void AddNewVehicle(VehicleViewModel newVehicle)
	{
		Console.WriteLine("Adding new vehicle");
		if (vehicles != null && vehicles.Count() != 0)
		{
			// There are existing vehicles
			var newVehiclesList = vehicles.ToList();
			newVehiclesList.Add(newVehicle);
			vehicles = newVehiclesList.ToArray();
		}
		else
		{
			// There are no existing vehicles build new array
			vehicles = new VehicleViewModel[1] { newVehicle };

		}
	}

}
